/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { type ParsedMakeOfferInstruction } from '../instructions';

export const ANCHOR_ESCROW_PROGRAM_ADDRESS =
  '95yy32pfxhUVFScseYUNiWoDMc121PkUaQYiKVAeNyE8' as Address<'95yy32pfxhUVFScseYUNiWoDMc121PkUaQYiKVAeNyE8'>;

export enum AnchorEscrowAccount {
  Offer,
}

export function identifyAnchorEscrowAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AnchorEscrowAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([215, 88, 60, 71, 170, 162, 73, 229])
      ),
      0
    )
  ) {
    return AnchorEscrowAccount.Offer;
  }
  throw new Error(
    'The provided account could not be identified as a anchorEscrow account.'
  );
}

export enum AnchorEscrowInstruction {
  MakeOffer,
}

export function identifyAnchorEscrowInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AnchorEscrowInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([214, 98, 97, 35, 59, 12, 44, 178])
      ),
      0
    )
  ) {
    return AnchorEscrowInstruction.MakeOffer;
  }
  throw new Error(
    'The provided instruction could not be identified as a anchorEscrow instruction.'
  );
}

export type ParsedAnchorEscrowInstruction<
  TProgram extends string = '95yy32pfxhUVFScseYUNiWoDMc121PkUaQYiKVAeNyE8',
> = {
  instructionType: AnchorEscrowInstruction.MakeOffer;
} & ParsedMakeOfferInstruction<TProgram>;
